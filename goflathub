#!/usr/bin/env python3

import argparse
import logging
import json

from build_aux.build_common import *
import build_aux.flatpak_cargo_generator as cg

G_RPM_VERSION = None
G_SRPM_PATH = None
G_MOCK_SRPM_ROOT = None
G_MOCK_RPM_ROOT = None
SPEC_FILE_PATH = None
G_LOCAL_RPM_DIR = "tmp"
G_SOURCES_DIR = f"{G_LOCAL_RPM_DIR}/SOURCES"
G_SPECS_DIR = f"{G_LOCAL_RPM_DIR}/SPECS"
COPR_REPO = "sysd-manager"

APP_ID = "io.github.plrigaux.sysd-manager"
MANIFEST = f"{APP_ID}.yaml"
FLATHUB_DIR = "../flathub"


def main():
    parser = argparse.ArgumentParser(
        description="Copr RPM builder",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "action",
        choices=[
            "clean",
            "build",
            "run",
            "lint",
            "compose",
            "validate",
            "flathub",
            "generate",
        ],
        help="action to perform",
    )

    parser.add_argument("--logbus", action="store_true", help="log dbus message on run")
    args = parser.parse_args()

    match args.action:
        case "build":
            build()
        case "clean":
            clean()
        case "run":
            run(args.logbus)
        case "lint":
            lint()
        case "compose":
            compose()
        case "validate":
            validate()
        case "flathub":
            add_required_files()
        case "generate":
            generate()
        case "repair":
            repair()
        case _:
            print("No actions performed")


def clean():
    list_dir = ["builddir", ".flatpak-builder", "cargo-sources.json"]

    for dir in list_dir:
        print(f"{color.BOLD}Deleting{color.END} {dir}")
        cmd_run(["rm", "-fr", dir])


def build():
    print(f"{color.BOLD}{color.CYAN}Building for flatpak{color.END}")

    generate()
    # Info https://docs.flathub.org/docs/for-app-authors/submission/
    cmd_run(
        [
            "flatpak",
            "run",
            "org.flatpak.Builder",
            "--force-clean",
            "--sandbox",
            "--user",
            "--install",
            "--install-deps-from=flathub",
            "--ccache",
            "--mirror-screenshots-url=https://dl.flathub.org/media/",
            "--repo=repo",
            "builddir",
            MANIFEST,
        ]
    )


def repair():
    cmd_run(["flatpak", "-v", "--user", "repair"])


def run(logbus=False):
    print("Try to run the Flatpack")

    cmd = ["flatpak", "run", APP_ID]
    if logbus:
        cmd.insert(2, "--log-session-bus")

    cmd_run(cmd)


def lint():
    print(f"{color.BOLD}{color.CYAN}Lint manifest{color.END}")
    cmd_run(
        [
            "flatpak",
            "run",
            "--command=flatpak-builder-lint",
            "org.flatpak.Builder",
            "manifest",
            MANIFEST,
        ]
    )

    print(f"{color.BOLD}{color.CYAN}Lint repo{color.END}")
    cmd_run(
        [
            "flatpak",
            "run",
            "--command=flatpak-builder-lint",
            "org.flatpak.Builder",
            "repo",
            "repo",
        ]
    )


def compose():
    print(f"{color.BOLD}{color.CYAN}appstreamcli compose{color.END}")
    cmd_run(["appstreamcli", "compose", "builddir/files"])


def validate():
    print(f"{color.BOLD}{color.CYAN}Validate metainfo.xml{color.END}")
    cmd_run(
        [
            "flatpak",
            "run",
            "--command=flatpak-builder-lint",
            "org.flatpak.Builder",
            "appstream",
            f"data/metainfo/{APP_ID}.metainfo.xml",
        ]
    )

    lint()


def add_required_files():
    print(
        f"{color.BOLD}{color.CYAN}Add the required files for the submission{color.END}"
    )
    # https://docs.flathub.org/docs/for-app-authors/requirements/#required-files
    cmd_run(["cp", "-v", MANIFEST, FLATHUB_DIR])


def generate():
    print(f"{color.BOLD}{color.CYAN}Generate cargo sources{color.END}")
    cargo_lock = "Cargo.lock"
    outfile = "cargo-sources.json"
    loglevel = logging.DEBUG
    logging.basicConfig(level=loglevel)
    git_tarballs = False

    generated_sources = cg.asyncio.run(
        cg.generate_sources(cg.load_toml(cargo_lock), git_tarballs=git_tarballs)
    )
    with open(outfile, "w") as out:
        json.dump(generated_sources, out, indent=4, sort_keys=False)


main()
