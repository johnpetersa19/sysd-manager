#!/usr/bin/env python3

import sys
import os
import inspect
import pwd
import shutil

# Get the parent directory
# currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
# parentdir = os.path.dirname(currentdir)
# sys.path.insert(0, parentdir)


from build_aux.build_common import *

print(f"{color.CYAN}{color.BOLD}Info:{color.END} make source")

SERVICE_USER = pwd.getpwuid(os.getuid())[0]
SERVICE_NAME = "sysd_test.service"
SERVICE_DIR = f"{os.path.expanduser('~')}/bin"
SERVICE_PATH = f"/etc/systemd/system/{SERVICE_NAME}"
EXEC_FILE = "sysd-test-manager"


print(f"{color.CYAN}{color.BOLD}{SERVICE_USER}{color.END}")
print(f"{color.CYAN}{color.BOLD}{SERVICE_NAME}{color.END}")
print(f"{color.CYAN}{color.BOLD}{SERVICE_DIR}{color.END}")
print(f"{color.CYAN}{color.BOLD}{SERVICE_PATH}{color.END}")

os.path.expanduser("~")

print(f"Checking if the service '{SERVICE_NAME}' is running ...")


if (
    cmd_run(["systemctl", "is-active", "--quiet", SERVICE_NAME], on_fail_exit=False)
    == 0
):
    print(f"Service '{SERVICE_NAME}' is running")

    if cmd_run(["systemctl", "stop", SERVICE_NAME]) == 0:
        print(f"Service '{SERVICE_NAME}' stopped")
    else:
        print(
            f"{color.BOLD}ERROR${color.END}: The service '{SERVICE_NAME}' can not be stopped"
        )
        exit(1)

else:
    print(f"Service '{SERVICE_NAME}' is not running")

print(f"Compile binary ...")
cmd_run(["cargo", "build"], cwd="sysd_test_service")

print(f"Install binary ...")
# Source path
cmd_run(["mkdir", "-p", SERVICE_DIR], verbose=False)
cmd_run(
    ["cp", f"sysd_test_service/target/debug/{EXEC_FILE}", f"{SERVICE_DIR}/{EXEC_FILE}"]
)

print(f"Creating Service unit file in '{SERVICE_PATH}' ...")

unit_file = f"""[Unit]
    Description=Sysd Manager Test Service
    After=network.target

    [Service]
    SyslogIdentifier=sysd_test
    Restart=always
    RestartSec=5
    Type=simple
    User={SERVICE_USER}
    Group={SERVICE_USER}
    WorkingDirectory={SERVICE_DIR}
    ExecStart= "{SERVICE_DIR}/{EXEC_FILE}"
    TimeoutStopSec=30
    Environment="RUST_LOG=info"

    [Install]
    WantedBy=multi-user.target"""

if os.geteuid() == 0:
    print("We're root!")
else:
    print("We're not root.")
    cmd_run(["sudo", "python", "build_aux/write_to_file.py", SERVICE_PATH, unit_file])
    

cmd_run(
    [
        "sudo",
        "systemctl",
        "daemon-reload",
    ]
)

cmd_run(["sudo", "systemctl", "enable", SERVICE_NAME])

cmd_run(["sudo", "systemctl", "start", SERVICE_NAME])
